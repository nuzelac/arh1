        `ORG 0

        MOVE    PODACI, R1          ; adresa pocetnog podatka u bloku
        MOVE    %D 12, R2           ; brojac za petlju
        MOVE    0, R6               ; brojac promijenjenih podataka
        MOVE    10000, SP           ; inicijalizacija stack pointera

PETLJA  AND     R2, R2, R2
        JR_Z    KRAJ                ; kraj petlje
        LOADB   R3, (R1)            ; pocetni podatak
        
        PUSH    R3                  ; parametar potprograma, 8-bitni podatak
        
        CALL    PAR
        ; nakon zavrsetka potprograma u R0 ce nam biti rezultat
        ADD     SP, 4, SP           ; oslobadjamo stog
        
        CMP     R3, R0              ; je li se promijenio podatak
        JR_EQ    DALJE
        ADD     R6, 1, R6           ; povecaj brojac promjena
        
DALJE   SUB     R2, 1, R2           ; smanji brojac petlje
        STOREB  R0, (R1)            ; spremi (novi) rezultat
        ADD     R1, 1, R1           ; pomakni se na sljedeci podatak
        JR      PETLJA

KRAJ    HALT
        
PODACI  DB 0, 1, 0FF, 2, 3, 0F3, 0F8, 0E, 0B, 36, 7E, 9F

PAR     PUSH    R2                  ; koristimo kao brojac koji bit trenutno gledamo
        PUSH    R3                  ; koristit cemo za usporedbu bita
        PUSH    R4                  ; brojac jedinica
        
        LOAD    R0, (SP + 10)       ; parametar potprograma - TODO updateati ako jos toga pushnem
        
        MOVE    1, R2               ; gledamo prvi bit na pocetku
        MOVE    0, R4               ; pocetni broj jedinica je 0
        
PETLJAPAR CMP     R2, 80            ; kada dodjemo do 8. bita, zavrsavamo petlju
        JR_Z    IZRACUNAJ
        
        AND     R0, R2, R3          ; je li trenutni bit jedinica?
        JR_Z    DALJEPAR
        ADD     R4, 1, R4           ; ako je, povecaj brojac jedinica
        
DALJEPAR    SHL R2, 1, R2           ; pomakni se ulijevo i nastavi
        JR      PETLJAPAR

IZRACUNAJ AND     R4, 1, R4         ; provjeri je li dobivani brojac jedinica paran-neparan
        JR_Z    POZPAR
        AND     R0, 7F, R0          ; ako je neparan, postavi najvisi bit u 0
        JR      KRAJPAR
POZPAR  OR      R0, 80, R0          ; ako je paran, postavi najvisi bit u 1

KRAJPAR POP     R4
        POP     R3
        POP     R2                  ; vracamo registre

        RET
